Base 64编码

Base 64 编码采用了US-ASCII 的65个字符集，每个字符都由6位来表示（0-  2 6-1），而第65位字符“=”用来表示字符串的结束。

Value	Encoding
0	A
1	B
2	C
3	D
4	E
5	F
6	G
7	H
8	I
9	J
10	K
11	L
12	M
13	N
14	O
15	P
16	Q
17	R
18	S
19	T
20	U
21	V
22	W
23	X
24	Y
25	Z
26	a
27	b
28	c
29	d
30	e
31	f
32	g
33	h
34	i
35	j
36	k
37	l
38	m
39	n
40	o
41	p
42	q
43	r
44	s
45	t
46	u
47	v
48	w
49	x
50	y
51	z
52	0
53	1
54	2
55	3
56	4
57	5
58	6
59	7
60	8
61	9
62	+
63	/
64(pad)	=
	
编码原理

输入串以24bits（3字节） 为一位组，输出为4个编码后的字符，编码过程从左到右。24位的输入组实际上是3个八位的单字节构成，编码时24位被视为4个6位（0-63）的组合，每个6位再按照base64字母表编码为一个字符。（编码时位的顺序？）

输出行每行不应多于76个字符，编码表中没有的字符将被忽略。

当输入位数小于24位时，右边补0直到位数构成6位的倍数。

换行符必须转换成由base64编码过的CRLF字符序列。

如果遇到“=”，则可说明已到达字符串结尾。

数据的结尾用“=”填充，下列为“=”使用的情况：

1）               当输入位数为24位的整数倍的时候，编码后的输出单元为4的整倍数，此时输出结尾没有“=”。

2）               若输入流的最后单位是8位时，末尾将会有两个“=”。


3）               若输入流的最后单位是16位，末尾将会有一个“=”。


程序流程：

1）  编码：输入-原文。

逐个扫描输入字节，每六位转换成base64字符，直到结束。注意换行，以及结尾“=”符号处理。

2）  解码：输入-译文base64代码

判断是否为合法字符，逐个输入译文符号，没3字节（24bits）进行一次处理。注意结尾“=”的处理。

